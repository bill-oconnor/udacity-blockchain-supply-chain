// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain');
var ConsumerRole = artifacts.require('ConsumerRole');
var DistributorRole = artifacts.require('DistributorRole');
var FarmerRole = artifacts.require('FarmerRole');
var RetailerRole = artifacts.require('RetailerRole');

async function addConsumer(consumerAddress, ownerAddress, contract) {
    const consumerSet = await contract.isConsumer.call(consumerAddress, { from: ownerAddress });
    !consumerSet && await contract.addConsumer(consumerAddress, { from: ownerAddress });
    const success = await contract.isConsumer.call(consumerAddress, { from: ownerAddress });
    return success;
}

async function addDistributor(distributorAddress, ownerAddress, contract) {
    const distributorSet = await contract.isDistributor.call(distributorAddress, { from: ownerAddress });
    !distributorSet && await contract.addDistributor(distributorAddress, { from: ownerAddress });
    const success = await contract.isDistributor.call(distributorAddress, { from: ownerAddress });
    return success;
}

async function addFarmer(farmerAddress, ownerAddress, contract) {
    const farmerSet = await contract.isFarmer.call(farmerAddress, { from: ownerAddress });
    !farmerSet && await contract.addFarmer(farmerAddress, { from: ownerAddress });
    const success = await contract.isFarmer.call(farmerAddress, { from: ownerAddress });
    console.log({farmerSet, success})
    return success;
}

async function getFarmersCount(contract) {
    const count = await contract.membershipCount.call();
    return count;
}

async function isFarmer(address, contract) {
    const isFarmer = await contract.isFarmer.call(address);
    return isFarmer;
}

async function addRetailer(retailerAddress, ownerAddress, contract) {
    const retailerSet = await contract.isRetailer.call(retailerAddress, { from: ownerAddress });
    !retailerSet && await contract.addRetailer(retailerAddress, { from: ownerAddress });
    const success = await contract.isRetailer.call(retailerAddress, { from: ownerAddress });
    return success;
}

contract('SupplyChain', async function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei("1", "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    // register the accounts for respective roles
    

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    // 1st Test
    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {
        const supplyChain = await SupplyChain.deployed();
        const farmerOwnerAdded = await addFarmer(ownerID, ownerID, supplyChain);
        const farmerAdded = await addFarmer(originFarmerID, ownerID, supplyChain);
        const farmersCount = await getFarmersCount(supplyChain);
        const farmerSaved = await isFarmer(originFarmerID, supplyChain);

        await supplyChain.registerUser(originFarmerID);
        // const userRegistered = await supplyChain.isRegistered.call(originFarmerID);

        // const senderRegistered = await supplyChain.senderIsRegistered.call({ from: originFarmerID });

        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Harvested()
        // var event = supplyChain.Harvested();
        // console.log(event);
        // await event.watch((err, res) => {
        //     eventEmitted = true
        // })


        console.log({
            farmerAdded,
            farmerOwnerAdded,
            farmersCount,
            farmerSaved,
            // senderRegistered
        });
        assert.equal(farmerAdded, true);
        assert.equal(farmerSaved, true);
        assert.equal(farmersCount, 2);
        // assert.equal(senderRegistered, originFarmerID);

        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, { from: originFarmerID });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State')
        // assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {
        const supplyChain = await SupplyChain.deployed();
        const farmerAdded = await addFarmer(originFarmerID, ownerID, supplyChain);
        
        assert.equal(farmerAdded, true, "Farmer was never added as a farmer");
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Processed()
        // var event = supplyChain.Processed()
        // await event.watch((err, res) => {
        //     eventEmitted = true
        // })

        // Mark an item as Processed by calling function processItem()
        await supplyChain.processItem(upc, { from: originFarmerID });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State')
        // assert.equal(eventEmitted, true, 'Invalid event emitted')              
    })    

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
        const supplyChain = await SupplyChain.deployed();
        await addFarmer(originFarmerID, ownerID, supplyChain);
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Packed()
        // var event = supplyChain.Packed()
        // await event.watch((err, res) => {
        //     eventEmitted = true
        // })

        // Mark an item as Packed by calling function packItem()
        await supplyChain.packItem(upc, { from: originFarmerID });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State')
        // assert.equal(eventEmitted, true, 'Invalid event emitted') 
    })    

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
        const supplyChain = await SupplyChain.deployed();
        await addFarmer(originFarmerID, ownerID, supplyChain);
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event ForSale()
        // var event = supplyChain.ForSale()
        // await event.watch((err, res) => {
        //     eventEmitted = true
        // })

        // Mark an item as ForSale by calling function sellItem()
        await supplyChain.sellItem(upc, productPrice, { from: originFarmerID })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Missing or Invalid productPrice')
        assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State')
        // assert.equal(eventEmitted, true, 'Invalid event emitted') 
    })    

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        const supplyChain = await SupplyChain.deployed();
        await addDistributor(distributorID, ownerID, supplyChain);
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Sold()
        // var event = supplyChain.Sold()
        // await event.watch((err, res) => {
        //     eventEmitted = true
        // })

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.buyItem(upc, { from: distributorID, value: productPrice })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], distributorID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Missing or Invalid distributorID')
        // assert.equal(eventEmitted, true, 'Invalid event emitted')
    })    

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        await addDistributor(distributorID, ownerID, supplyChain);
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Shipped()
        // var event = supplyChain.Shipped()
        // await event.watch((err, res) => {
        //     eventEmitted = true
        // })

        // Mark an item as Shipped by calling function shipItem()
        await supplyChain.shipItem(upc, { from: distributorID })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], distributorID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State')
        // assert.equal(eventEmitted, true, 'Invalid event emitted')
    })    

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        const supplyChain = await SupplyChain.deployed()
        await addRetailer(retailerID, ownerID, supplyChain);
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Received()
        // var event = supplyChain.Received()
        // await event.watch((err, res) => {
        //     eventEmitted = true
        // })

        // Mark an item as Received by calling function receiveItem()
        await supplyChain.receiveItem(upc, { from: retailerID })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], retailerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[5], 6, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Missing or Invalid retailerID')
        // assert.equal(eventEmitted, true, 'Invalid event emitted')
    })    

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        const supplyChain = await SupplyChain.deployed()
        await addConsumer(consumerID, ownerID, supplyChain);
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Purchased()
        // var event = supplyChain.Purchased()
        // await event.watch((err, res) => {
        //     eventEmitted = true
        // })

        // Mark an item as Purchased by calling function purchaseItem()
        await supplyChain.purchaseItem(upc, { from: consumerID })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Missing or Invalid consumerID')
        // assert.equal(eventEmitted, true, 'Invalid event emitted')
    })    

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        
        // Verify the result set:
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[2], consumerID, 'Error: Invalid item ownerID');
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Invalid item originFarmerID');
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Invalid item originFarmName');
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Invalid item originFarmInformation');
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Invalid item originFarmLatitude');
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Invalid item originFarmLongitude');
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        
        // Verify the result set:
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid item productID');
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Invalid item productNotes');
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid item productPrice');
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item itemState');
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid item distributorID');
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid item retailerID');
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Invalid item consumerID');  
    })

});

